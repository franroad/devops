Helm course
-Package manager for kubernetes, single command installation
-Dependencies are resolved easier management.

-Everything is in the Package hence  install-->use.

-chart is the definition of  a kubernetes application.

-Helm does release tracking.


```python
Helm install , helm rollback, helm uninstall....
````
kubernetes without helm. basado en las releases, podemos ejecutar multuples veces la misma release que hara nuevas instancias como estan en la release como si fuese independientes

1. locate chart
2. Deploy chart
3. perform configuration in case necesary.

once installed you want to add a helm repo


-index  file for the repository , a CHART IS AN http SERVER THAT IS CAPABLE OF SERVING AN INDDEX.YAMLFILE. 
tHIS FILE CONTAINS THE MANISFESTS OF PACKAGED CHARTS AND WHERE ARE THEY LOCATED

-A Helm chart is a pre-configured template of Kubernetes resources. 
It encapsulates a set of Kubernetes manifests (such as deployments, services, config maps, etc.) into a single package.

-A Helm repository is a location where packaged Helm charts can be stored and shared.
It houses an index.yaml file that contains metadata about the charts in the repository.

-In summary, Helm charts are the actual application templates, 
while Helm repositories serve as the storage and distribution mechanism for these charts


- we can modify the files in the repo and updload it again to the repo.

- A helm release represents an instance of a chart running within a kubernetes cluster.
wHEN TOU INSTALL A CHART USING HELM IT CREATES A RELEASE IN YOUR KUBERNETES CLUSTER

-Helm upgrade "name-release" -ser alpime.image=1.1.6 -->hel status can be use to see the cuerrent state of a realease

## HELM CHART STRUCTURE
Somecchart/
Chart.yaml
LICENSE
README.modify
values.yaml --> contains default values which will be passed to the templates
values.shcema.json
charts/
crds/-->custom resource definitions
templates/--> incorporate the contants of the values.yaml file
templates/notes

helm install --dry-run --> para ver lo que creara --debug para ver si hay conflictos con recursos existentes.

helm install demo example -f (le paso un archivo va a cambiar los valore overide in the resulting manifest)


Podemos cambiar el values.yaml con los valores que nosotros queramos.


templates--> pluggable, reusable versability, maintanability. based on GO

{{.Values.image.registry}}

This is the structure: (the templates folder is required) is where we put our templates

testchart --> main folder that groups all the necesary files/folders
├── Chart.yaml -->chart itself
├── templates --> contains de templates for the CRD
│   ├── deployment.yaml --> the templates 
│   └── service.yaml
└── values.yaml --> the values for the templates, the templates fill their "gaps" with the values declared here

values.yaml

Subchart in charts directory, subchart, 
global value can be accessed by the both the pareint and any subcharts that are present.

